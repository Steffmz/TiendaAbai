generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
  theme    = "dark"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//----------- ENUMS -----------//
enum Role {
  Empleado
  Administrador
}

enum TipoPunto {
  ACUMULACION
  CANJE
  ASIGNACION_MANUAL
  AJUSTE
  EXPIRACION
}

enum EstadoPedido {
  Pendiente
  RequiereAprobacion
  Aprobado
  Enviado
  Entregado
  Cancelado
  Rechazado
}

//----------- MODELS -----------//
model Cargo {
  id       Int       @id @default(autoincrement())
  nombre   String    @unique
  usuarios Usuario[]

  @@map("cargos")
}

model Usuario {
  id                       Int               @id @default(autoincrement())
  cedula                   String            @unique @db.VarChar(15)
  nombreCompleto           String
  cargoId                  Int
  cargo                    Cargo             @relation(fields: [cargoId], references: [id])
  sede                     String
  email                    String            @unique
  contrasena               String
  rol                      Role              @default(Empleado)
  puntosTotales            Int               @default(0)
  activo                   Boolean           @default(true)
  fechaRegistro            DateTime          @default(now())
  centroDeCostosId         Int
  centroDeCostos           CentroDeCostos    @relation(fields: [centroDeCostosId], references: [id])
  historialPuntosRecibidos HistorialPuntos[] @relation("Beneficiario")
  historialPuntosCreados   HistorialPuntos[] @relation("AdminCreador")
  pedidos                  Pedido[]
  pedidosAprobados         Pedido[]          @relation("AprobadoPor")
  carrito                  Carrito[]
  notificaciones           Notificacion[]

  @@map("usuarios")
}

model CentroDeCostos {
  id       Int       @id @default(autoincrement())
  codigo   String?   @unique @db.VarChar(20)
  nombre   String    @unique
  usuarios Usuario[]

  @@map("centros_de_costos")
}

model Pedido {
  id                 Int             @id @default(autoincrement())
  fecha              DateTime        @default(now())
  estado             EstadoPedido    @default(Pendiente)
  totalPuntos        Int
  usuarioId          Int
  usuario            Usuario         @relation(fields: [usuarioId], references: [id], onDelete: NoAction)
  aprobadoPorAdminId Int?
  aprobadoPorAdmin   Usuario?        @relation("AprobadoPor", fields: [aprobadoPorAdminId], references: [id], onDelete: SetNull)
  fechaAprobacion    DateTime?
  comentarioAdmin    String?         @db.Text
  detalles           PedidoDetalle[]
  notificaciones     Notificacion[]

  @@map("pedido")
}

model Notificacion {
  id         Int      @id @default(autoincrement())
  titulo     String
  mensaje    String   @db.Text
  leido      Boolean  @default(false)
  fechaEnvio DateTime @default(now())
  usuarioId  Int
  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  pedidoId   Int?
  pedido     Pedido?  @relation(fields: [pedidoId], references: [id], onDelete: SetNull)

  @@map("notificaciones")
}

model Categoria {
  id            Int        @id @default(autoincrement())
  nombre        String     @unique
  descripcion   String?    @db.Text
  activo        Boolean    @default(true)
  fechaCreacion DateTime   @default(now())
  imagenUrl     String?
  productos     Producto[]

  @@map("categorias")
}

model Producto {
  id             Int             @id @default(autoincrement())
  nombre         String
  descripcion    String?         @db.Text
  precioPuntos   Int
  stock          Int             @default(0)
  imagenUrl      String?
  estado         Boolean         @default(true)
  fechaCreacion  DateTime        @default(now())
  categoriaId    Int
  categoria      Categoria       @relation(fields: [categoriaId], references: [id])
  campanas       Campana[]       @relation("campanatoproducto")
  carrito        Carrito[]
  pedidoDetalles PedidoDetalle[]

  @@map("productos")
}

model Campana {
  id            Int        @id @default(autoincrement())
  titulo        String
  descripcion   String?    @db.Text
  fechaInicio   DateTime   @db.Date
  fechaFin      DateTime   @db.Date
  imagenUrl     String?
  aprobada      Boolean    @default(false)
  puntos        Int?
  descuento     Int?
  fechaCreacion DateTime   @default(now())
  productos     Producto[] @relation("campanatoproducto")

  @@map("campanas")
}

model Carrito {
  id            Int      @id @default(autoincrement())
  cantidad      Int
  fechaAgregado DateTime @default(now())
  usuarioId     Int
  usuario       Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  productoId    Int
  producto      Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, productoId])
  @@map("carrito")
}

model HistorialPuntos {
  id             Int       @id @default(autoincrement())
  puntos         Int
  tipo           TipoPunto
  descripcion    String?
  origenId       Int?
  fecha          DateTime  @default(now())
  beneficiarioId Int
  beneficiario   Usuario   @relation("Beneficiario", fields: [beneficiarioId], references: [id], onDelete: NoAction)
  adminCreadorId Int?
  adminCreador   Usuario?  @relation("AdminCreador", fields: [adminCreadorId], references: [id], onDelete: SetNull)

  @@map("historial_puntos")
}

model PedidoDetalle {
  id              Int      @id @default(autoincrement())
  cantidad        Int
  puntosUnitarios Int
  pedidoId        Int
  pedido          Pedido   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  productoId      Int
  producto        Producto @relation(fields: [productoId], references: [id], onDelete: Restrict)

  @@map("pedido_detalle")
}
